tst <- mypairs(rnorm(3)); tst
mypairs <- function(x) {#
	np <- length(x)#
	M <- matrix(NA_real_, np, np)#
	for (i in 1:np) {#
		for (j in 1:np) { #
			if (j > i) M[i,j] <- x[j]-x[i]#
			}#
		}#
	M <- abs(M)#
	v <- vector("numeric", np^2)#
	for (i in 1:np) {#
		v[(np*(i-1)+1):(np*i)] <- M[,i]#
		}#
	idx1 <- rep(1:np, np)#
	idx2 <- rep(1:np, each = np)#
	v#
	}
mypairs <- function(x) {#
	np <- length(x)#
	M <- matrix(NA_real_, np, np)#
	for (i in 1:np) {#
		for (j in 1:np) { #
			if (j > i) M[i,j] <- x[j]-x[i]#
			}#
		}#
	M <- abs(M)#
	v <- vector("numeric", np^2)#
	for (i in 1:np) {#
		v[(np*(i-1)+1):(np*i)] <- M[,i]#
		}#
	idx1 <- rep(1:np, np) #
	idx2 <- rep(1:np, each = np) #
	print(idx1)#
	print(idx2)#
	v#
	}
tst <- mypairs(rnorm(3)); tst#
#
mypairs <- function(x) {#
	require("plyr")#
	np <- length(x)#
	M <- matrix(NA_real_, np, np)#
	for (i in 1:np) {#
		for (j in 1:np) { #
			if (j > i) M[i,j] <- x[j]-x[i]#
			}#
		}#
	M <- abs(M)#
	d <- vector("numeric", np^2)#
	for (i in 1:np) {#
		d[(np*(i-1)+1):(np*i)] <- M[,i]#
		}#
	idx1 <- rep(1:np, np) #
	idx2 <- rep(1:np, each = np) #
	nope <- which(is.na(d))#
	d <- d[-nope]#
	idx1 <- idx1[-nope]#
	idx2 <- idx2[-nope]#
	df <- data.frame(dist = d, ptA = idx1, ptB = idx2)#
	df <- arrange(df, desc(d))#
	df#
	}
tst <- mypairs(rnorm(10)); tst
mypairs <- function(x) {#
	require("plyr")#
	np <- length(x)#
	M <- matrix(NA_real_, np, np)#
	for (i in 1:np) {#
		for (j in 1:np) { #
			if (j > i) M[i,j] <- x[j]-x[i]#
			}#
		}#
	M <- abs(M)#
	d <- vector("numeric", np^2)#
	for (i in 1:np) {#
		d[(np*(i-1)+1):(np*i)] <- M[,i]#
		}#
	idx1 <- rep(1:np, np) #
	idx2 <- rep(1:np, each = np) #
	nope <- which(is.na(d))#
	d <- d[-nope]#
	idx1 <- idx1[-nope]#
	idx2 <- idx2[-nope]#
	df <- data.frame(dist = d, ptA = idx1, ptB = idx2)#
	df <- arrange(df, d)#
	df#
	}
system.time(tst <- mypairs(rnorm(10)))
system.time(tst <- mypairs(rnorm(1000)))
system.time(tst <- mypairs(rnorm(2000)))
system.time(tst <- mypairs(rnorm(5000)))
system.time(tst <- mypairs(rnorm(10000)))
head(tst)
tail(tst)
?layout
library("ChemoSpec")
?evalClusters
ls()
res2 <- hcaSpectra(SrE.IR, main = myt, c.method = "median", d.method = "manhattan")
res2 <- hcaSpectra(SrE.IR, main = myt, d.method = "cosine")
data(SrE.IR)#
#
res1 <- hcaSpectra(SrE.IR, main = myt)
data(SrE.IR)#
#
myt <- expression(bolditalic(Serenoa)~bolditalic(repens)~bold(IR~Spectra))#
res1 <- hcaSpectra(SrE.IR, main = myt) #
res2 <- hcaSpectra(SrE.IR, main = myt, d.method = "cosine")#
#
crit1 <- evalClusters(SrE.IR, pkg = "clusterCrit", hclst = res1[[1]], k = 4)#
crit2 <- evalClusters(SrE.IR, pkg = "clusterCrit", hclst = res2[[1]], k = 4)
crit1
crit2
data(metMUD1)
plotSpectra(metMUD1, main = "metMUD1 NMR Data",#
	which = c(10, 11), yrange = c(0,1.5),#
	offset = 0.8, amplify = 1.0, lab.pos = 2.5)
plotSpectra(metMUD1, main = "metMUD1 NMR Data",#
	which = c(10, 11), yrange = c(0,1.5),#
	offset = 0.8, amplify = 10, lab.pos = 0.5)
plotSpectra(metMUD1, main = "metMUD1 NMR Data",#
	which = c(10, 11), yrange = c(0,1.5),#
	offset = 0.4, amplify = 10, lab.pos = 0.5)
plotSpectra(metMUD1, main = "metMUD1 NMR Data",#
	which = c(10, 11), yrange = c(0,1.5),#
	offset = 0.1, amplify = 10, lab.pos = 0.5)
plotSpectra(metMUD1, main = "metMUD1 NMR Data",#
	which = c(10, 11), yrange = c(0,1.5),#
	offset = 0.075, amplify = 10, lab.pos = 0.5)
plotSpectra(metMUD1, main = "metMUD1 NMR Data",#
	which = c(10, 11), yrange = c(0,1.5),#
	offset = 0.06, amplify = 10, lab.pos = 0.5)
results <- c_pcaSpectra(metMUD1)#
plotScores(metMUD1, main = "metMUD1 Data", results,#
	pcs = c(1,2), ellipse = "rob", tol = 0.05)
results <- c_pcaSpectra(metMUD1)#
plotScores(metMUD1, main = "metMUD1 Data", results,#
	pcs = c(1,2), ellipse = "cls", tol = 0.05)
results <- c_pcaSpectra(metMUD1)#
plotScree(results, main = "metMUD1")#
plotScree2(results, main = "metMUD1")
results <- c_pcaSpectra(metMUD1)#
plotScores(metMUD1, results, main = "metMUD1 Data",#
	pcs = c(1,2), ellipse = "cls", tol = 0.05)
results <- r_pcaSpectra(metMUD1)#
plotScores(metMUD1, results, main = "metMUD1 Data",#
	pcs = c(1,2), ellipse = "cls", tol = 0.05)
surveySpectra(metMUD1, method = "iqr")
sampleDistSpectra(metMUD1)
sampleDistSpectra(metMUD1, method = "cosine")
data(metMUD2)
sampleDistSpectra(metMUD2, method = "cosine")
sampleDistSpectra(metMUD2)
class <- c_pcaSpectra(metMUD1)#
mclustSpectra(metMUD1, class, main = "Cuticle IR", plot = "BIC")#
mclustSpectra(metMUD1, class, main = "Cuticle IR", plot = "proj")#
mclustSpectra(metMUD1, class, main = "Cuticle IR", plot = "error",#
	truth = metMUD1$groups)
mclustSpectra(metMUD1, class, main = "Cuticle IR", plot = "proj")
mclustSpectra(metMUD1, class, main = "Cuticle IR", plot = "error",#
	truth = metMUD1$groups)
class <- c_pcaSpectra(metMUD2)#
mclustSpectra(metMUD2, class, main = "Cuticle IR", plot = "BIC")
mclustSpectra(metMUD2, class, main = "Cuticle IR", plot = "proj")
class <- c_pcaSpectra(SrE.IR)#
mclustSpectra(SrE.IR, class, main = "Cuticle IR", plot = "BIC")#
mclustSpectra(SrE.IR, class, main = "Cuticle IR", plot = "proj")
class <- c_pcaSpectra(SrE.IR, choice = "autoscale")#
mclustSpectra(SrE.IR, class, main = "Cuticle IR", plot = "BIC")#
mclustSpectra(SrE.IR, class, main = "Cuticle IR", plot = "proj")
mclustSpectra(SrE.IR, class, main = "Cuticle IR", plot = "error",#
	truth = metMUD1$groups)
?sprintf
