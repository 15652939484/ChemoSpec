plotSpectra(metMUD1, main = "metMUD1 NMR Data",#
	which = c(10, 11), yrange = c(0,1.5),#
	offset = 0.4, amplify = 10, lab.pos = 0.5)
plotSpectra(metMUD1, main = "metMUD1 NMR Data",#
	which = c(10, 11), yrange = c(0,1.5),#
	offset = 0.1, amplify = 10, lab.pos = 0.5)
plotSpectra(metMUD1, main = "metMUD1 NMR Data",#
	which = c(10, 11), yrange = c(0,1.5),#
	offset = 0.075, amplify = 10, lab.pos = 0.5)
plotSpectra(metMUD1, main = "metMUD1 NMR Data",#
	which = c(10, 11), yrange = c(0,1.5),#
	offset = 0.06, amplify = 10, lab.pos = 0.5)
results <- c_pcaSpectra(metMUD1)#
plotScores(metMUD1, main = "metMUD1 Data", results,#
	pcs = c(1,2), ellipse = "rob", tol = 0.05)
results <- c_pcaSpectra(metMUD1)#
plotScores(metMUD1, main = "metMUD1 Data", results,#
	pcs = c(1,2), ellipse = "cls", tol = 0.05)
results <- c_pcaSpectra(metMUD1)#
plotScree(results, main = "metMUD1")#
plotScree2(results, main = "metMUD1")
results <- c_pcaSpectra(metMUD1)#
plotScores(metMUD1, results, main = "metMUD1 Data",#
	pcs = c(1,2), ellipse = "cls", tol = 0.05)
results <- r_pcaSpectra(metMUD1)#
plotScores(metMUD1, results, main = "metMUD1 Data",#
	pcs = c(1,2), ellipse = "cls", tol = 0.05)
surveySpectra(metMUD1, method = "iqr")
sampleDistSpectra(metMUD1)
sampleDistSpectra(metMUD1, method = "cosine")
data(metMUD2)
sampleDistSpectra(metMUD2, method = "cosine")
sampleDistSpectra(metMUD2)
class <- c_pcaSpectra(metMUD1)#
mclustSpectra(metMUD1, class, main = "Cuticle IR", plot = "BIC")#
mclustSpectra(metMUD1, class, main = "Cuticle IR", plot = "proj")#
mclustSpectra(metMUD1, class, main = "Cuticle IR", plot = "error",#
	truth = metMUD1$groups)
mclustSpectra(metMUD1, class, main = "Cuticle IR", plot = "proj")
mclustSpectra(metMUD1, class, main = "Cuticle IR", plot = "error",#
	truth = metMUD1$groups)
class <- c_pcaSpectra(metMUD2)#
mclustSpectra(metMUD2, class, main = "Cuticle IR", plot = "BIC")
mclustSpectra(metMUD2, class, main = "Cuticle IR", plot = "proj")
class <- c_pcaSpectra(SrE.IR)#
mclustSpectra(SrE.IR, class, main = "Cuticle IR", plot = "BIC")#
mclustSpectra(SrE.IR, class, main = "Cuticle IR", plot = "proj")
class <- c_pcaSpectra(SrE.IR, choice = "autoscale")#
mclustSpectra(SrE.IR, class, main = "Cuticle IR", plot = "BIC")#
mclustSpectra(SrE.IR, class, main = "Cuticle IR", plot = "proj")
mclustSpectra(SrE.IR, class, main = "Cuticle IR", plot = "error",#
	truth = metMUD1$groups)
?sprintf
library("ChemoSpec")
?rowDist
?requireNamespace
plotSpectraJS <- function(spectra, browser = NULL, minify = TRUE) {#
	if (missing(spectra)) stop("No spectral data provided")#
	chkSpectra(spectra)#
	if (is.unsorted(spectra$freq)) {#
		spectra$freq <- rev(spectra$freq)#
		spectra$data <- spectra$data[,ncol(spectra$data):1]#
		}#
#
	if (requireNamespace("jsonlite", quietly = TRUE)) {#
		Freq <- toJSON(spectra$freq)#
		D0 <- toJSON(spectra$data)#
		D1 <- toJSON(spectra$data)#
		Names <- toJSON(paste(" ", spectra$names, sep = "  "))#
		Groups <- toJSON(spectra$groups)#
		Colors <- toJSON(spectra$colors)#
		Unit <- toJSON(spectra$unit)#
		Desc <- toJSON(spectra$desc)#
		Dx <- toJSON(range(spectra$freq))#
		Dy <- toJSON(range(spectra$data))#
	 	sampleBOOL <- c(1L, rep(0, length(spectra$names)-1))#
		sampleBOOL <- toJSON(sampleBOOL)#
		data1 <- paste("var Freq = ", Freq, sep = "")#
		data2 <- paste("var D0 = ", D0, sep = "")#
		data3 <- paste("var D1 = ", D1, sep = "")#
		data4 <- paste("var Names = ", Names, sep = "")#
		data5 <- paste("var Groups = ", Groups, sep = "")#
		data6 <- paste("var Colors = ", Colors, sep = "")#
		data7 <- paste("var Unit = ", Unit, sep = "")#
		data8 <- paste("var Desc = ", Desc, sep = "")#
		data9 <- paste("var Dx = ", Dx, sep = "")#
		data10 <- paste("var Dy = ", Dy, sep = "")#
		data11 <- paste("var sampleBOOL = ", sampleBOOL, sep = "")#
		td <- tempdir()#
		fd <- system.file("extdata", package = "ChemoSpec")#
		pSfiles <- c("pS.css", "pS_globals.js", "pS_controls.js",#
		"pS_brushNguides.js", "pS_main.js", "plotSpectraJS.html", "pS_spectra.js")#
		chk2 <- file.copy(from=file.path(fd, pSfiles), to=file.path(td, pSfiles),#
			overwrite = TRUE)#
		if (!all(chk2)) stop("Copying to temporary directory failed")#
		js1 <- readLines(con = file.path(td,"pS_globals.js"))#
		js2 <- readLines(con = file.path(td,"pS_brushNguides.js"))#
		js3 <- readLines(con = file.path(td,"pS_controls.js"))#
		js4 <- readLines(con = file.path(td,"pS_spectra.js"))#
		js5 <- readLines(con = file.path(td,"pS_main.js"))#
		scopeFunHeader <- "(function() {"#
		scopeFunTail <- "})();"#
		text = c(scopeFunHeader, data1, data2, data3, data4,#
			data5, data6, data7, data8, data9, data10, data11,#
			js1, js2, js3, js4, js5, scopeFunTail)#
		if (minify) {#
			if (requireNamespace("js", quietly = TRUE)) {#
				text <- js::uglify_optimize(text, unused = FALSE)#
				}#
			if (!requireNamespace("js", quietly = TRUE)) {#
				stop("You need install package js to minify the JavaScript code")#
				}#
			}#
		writeLines(text, sep  = "\n", con = file.path(td,"pS.js"))#
		pg <-  file.path(td,"plotSpectraJS.html")#
		if (!is.null(browser)) {#
		    browseURL(pg, browser = browser)#
			} else {#
				viewer <- getOption("viewer")#
			  	if (is.null(browser) && !is.null(viewer)) {#
		      		viewer(pg)#
			  		} else {#
			    		browseURL(pg)#
			  			}#
			}#
		message("The plotSpectraJS web page is in the following\ntemp directory which is deleted when you quit R: ")#
		message(td)#
		return(invisible())#
	}#
	if (!requireNamespace("jsonlite", quietly = TRUE)) {#
		stop("You need install package jsonlite to use this function")#
		}#
	}
groupNcolor <-#
function(spectra, gr.crit = NULL, gr.cols = c("auto")) {#
	spectra$groups <- rep(NA, length(spectra$names)) #
	for (i in 1:length(gr.crit)) {#
		which <- grep(gr.crit[i], spectra$names)#
		if (length(which) == 0) warning("There was no match for gr.crit value ", gr.crit[i], " among the file names")#
		spectra$groups[which] <- gr.crit[i]#
		}#
	spectra$groups <- as.factor(spectra$groups)#
	if (any(is.na(spectra$groups))) warning("At least one file name did not correspond any entry in gr.crit and its group is thus NA")#
	spectra$colors <- rep(NA, length(spectra$names)) #
	if (identical(gr.cols[1], "auto")) {#
		if (requireNamespace("RColorBrewer", quietly = TRUE)) {#
			gr.cols <- RColorBrewer::brewer.pal(length(gr.crit), "Set1")#
			for (i in 1:length(gr.crit)) {#
				which <- grep(gr.crit[i], spectra$names)#
				spectra$colors[which] <- gr.cols[i]#
				}#
			}#
		if (!requireNamespace("RColorBrewer", quietly = TRUE)) {#
			stop("You need install package RColorBrewer or supply the colors yourself")#
			}#
		}#
	if (!identical(gr.cols[1], "auto")) {#
		for (i in 1:length(gr.crit)) {#
			which <- grep(gr.crit[i], spectra$groups)#
			spectra$colors[which] <- gr.cols[i]#
			}#
		}#
	sym.choice <- c(1, 2, 3, 15, 16, 17, 22, 8) #
	sym1 <- sym.choice[1:length(gr.crit)]#
	sym2 <- letters[1:length(gr.crit)]#
	if (length(gr.crit) > 8) {#
		sym1 <- c(1:length(gr.crit))#
		warning("Too many groups to use the preferred symbols!")#
		}#
#
	for (i in 1:length(gr.crit)) {#
		which <- grep(gr.crit[i], spectra$groups)#
		spectra$sym[which] <- sym1[i]#
		spectra$alt.sym[which] <- sym2[i]#
		}#
	class(spectra) <- "Spectra"#
	return(spectra) #
	}
sessionInfo()
RColorBrewer::brewer.pal(5, "set1")
RColorBrewer::brewer.pal(5, "Set1")
library('ChemoSpec')
?baselineSpectra
?exists
?try
?hasArg
b <- 1:1000#
a <- pi*b
a
ncb <- nchar(as.character(b))
head(ncb)
ncb
head(a)
pi
as.character(pi)
library("mclust")
citation("mclust")
library("sos")
findFn("cvsegments")
findFn("pcaPP")
