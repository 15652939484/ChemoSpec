plotJuanCarlos <- function(spectra, method = "pearson", ref = 1, ...) {#
	if (missing(spectra)) stop("No spectral data provided")#
	chkSpectra(spectra)#
	DM <- as.matrix(rowDist(spectra$data, method = method))#
	d <- DM[,ref]#
	str(d)#
	plot(order(d), type = "p", ...)#
	}
sumSpectra(SrE.NMR)
plotJuanCarlos <- function(spectra, method = "pearson", ref = 1, ...) {#
	if (missing(spectra)) stop("No spectral data provided")#
	chkSpectra(spectra)#
	DM <- as.matrix(rowDist(spectra$data, method = method))#
	d <- DM[,ref]#
	d <- d[-ref]#
	plot(order(d), type = "p", ...)#
	}
?order
plotJuanCarlos <- function(spectra, method = "pearson", ref = 1, ...) {#
	if (missing(spectra)) stop("No spectral data provided")#
	chkSpectra(spectra)#
	DM <- as.matrix(rowDist(spectra$data, method = method))#
	d <- DM[,ref]#
	d <- d[-ref]#
	plot(x = order(d), y = d, type = "p", ...)
plotJuanCarlos <- function(spectra, method = "pearson", ref = 1, ...) {#
	if (missing(spectra)) stop("No spectral data provided")#
	chkSpectra(spectra)#
	DM <- as.matrix(rowDist(spectra$data, method = method))#
	d <- DM[,ref]#
	d <- d[-ref]#
	plot(x = order(d), y = d, type = "p", ...)#
	}
plotJuanCarlos <- function(spectra, method = "pearson", ref = 1, ...) {#
	if (missing(spectra)) stop("No spectral data provided")#
	chkSpectra(spectra)#
	DM <- as.matrix(rowDist(spectra$data, method = method))#
	d <- DM[,ref]#
	d <- d[-ref]#
	plot(x = sort(d), type = "p", ...)#
	}
plotJuanCarlos(SrE.NMR)
plotJuanCarlos(SrE.NMR, xlab = "Rank Distance from Reference Spectrum")
plotJuanCarlos(SrE.NMR, xlab = "Rank Distance from Reference Spectrum",#
	ylab = "Distance from Reference Spectrum")
?avgFacLvls
library("ChemoSpec")
?check4Gaps
prompt(sgfSpectra)
getwd()
library("signal")
sgfSpectra <- function(spectra, m = 0) {#
	if (!requireNamespace("signal", quietly = TRUE)) {#
		stop("You need to install package signal to use this function")#
		}	#
#
	if (missing(spectra)) stop("No spectral data provided")#
	chkSpectra(spectra)#
	for (i in 1:length(spectra$names)) {#
		spectra$data[i,] <- sgolayfilt(spectra$data[i,], m = m)#
		}#
#
	chkSpectra(spectra)#
	return(spectra)#
	}
data(SrE.IR)
par(mfrow = c(2, 1))#
plotSpectra(SrE.IR, xlim = c(1900, 2100), yrange = c(0, 0.05))
test <- sgfSpectra(SrE.IR)
plotSpectra(test, xlim = c(1900, 2100), yrange = c(0, 0.05))
RShowDoc("KEYWORDS")
?sgolayfilt
install.packages("knitr")
install.packages("plyr")
install.packages("mvbutils")
install.packages("sna")
install.packages("IDPmisc")
install.packages("amap")
install.packages("seriation")
source("https://bioconductor.org/biocLite.R")#
biocLite("MassSpecWavelet")
install.packages("speaq")
install.packages("clusterCrit")
install.packages("NbClust")
install.packages("R.utils")
install.packages("RColorBrewer")
install.packages("baseline")
install.packages("js")
install.packages("jsonlite")
install.packages("exCon")
install.packages("mclust")
install.packages("gsubfn")
install.packages("lattice")
install.packages("pcaPP")
install.packages("pls")
install.packages("grid")
install.packages("robustbase")
install.packages("MASS")
install.packages("V8")
PKG_CONFIG_PATH
