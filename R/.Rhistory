colnames(M) <- c("frequency", paste(metMUD1$names, metMUD1$groups, sep = "_")
)
colnames(M)
?sapply
?strsplit
?basename
basename(file.path("","p1","p2","p3", c("file1", "file2")))
getwd()
basename()
basename(".")
basename(getwd())
basename(list.files())
?file.info
?file_ext
library("tools")
file_path_sans_ext(list.files())
?grepl
files2SpectraObject2 <-#
function(gr.crit = NULL, gr.cols = c("auto"),#
	freq.unit = "no frequency unit provided",#
	int.unit = "no intensity unit provided",#
	descrip = "no description provided",#
	fileExt = "\\.(csv|CSV)$",#
	out.file = "mydata", debug = FALSE, ...) {#
	if (!requireNamespace("R.utils", quietly = TRUE)) {#
		stop("You need to install package R.utils to use this function")#
		}#
#
	if (is.null(gr.crit)) stop("No group criteria provided to encode data")#
	DX = FALSE#
	if (grepl("(dx|DX|jdx|JDX)", fileExt)) DX <- TRUE#
	files <- list.files(pattern = fileExt)#
	files.noext <- tools::file_path_sans_ext(files)#
#
	spectra <- list() #
	spectra$names <- files.noext#
#
	if (debug) message("\nfiles2SpectraObject is checking the first file")#
	if (!DX) temp <- read.table(files[1], header = FALSE, ...)#
	if (DX) temp <- readJDX(file = files[1], debug = debug)#
#
	spectra$freq <- temp[,1]#
	if (class(spectra$freq) == "integer") {#
		if (debug) message("\nConverting integer frequency values to numeric")#
		spectra$freq <- as.numeric(spectra$freq)#
		}#
	spectra$data <- matrix(data = NA_real_, nrow = length(files), ncol = length(spectra$freq))#
	if (debug) message("\nfiles2SpectraObject will now import your files")#
	for (i in 1:length(files)) {#
		if (debug) cat("Importing file: ", files[i], "\n")#
		if (!DX) temp <- read.table(files[i], header = FALSE, ...)#
		if (DX) temp <- readJDX(files[i], debug = debug, ...)#
		spectra$data[i,] <- temp[,2]#
		}#
	spectra <- groupNcolor(spectra, gr.crit, gr.cols)#
	spectra$unit[1] <- freq.unit#
	spectra$unit[2] <- int.unit#
	spectra$desc <- descrip#
	chkSpectra(spectra)#
	datafile <- paste(out.file, ".RData", sep = "")#
#
	R.utils::saveObject(spectra, file = datafile)#
	return(spectra)#
	}
sumSpectra(SrE.IR)
warnings()
?grid
library('seriation')
?hmap
?plotScree
?plotScree2
data(metMUD1)
sumGroups(metMUD1)
?sampleDistSpectra
sampleDistSpectra <- function(spectra, method = "pearson", plot = TRUE, ...) {#
	if (!requireNamespace("lattice", quietly = TRUE)) {#
		stop("You need to install package lattice to use this function")#
	}#
	if (missing(spectra)) stop("No spectral data provided")#
	chkSpectra(spectra)#
#
	M <- rowDist(spectra$data, method)#
	if (plot) { #
		myc <- rev(rainbow(20, start = 0.0, end = 0.66))#
		p <- levelplot(as.matrix(M), xlab = "sample", ylab = "sample",#
			col.regions = myc,#
			at = seq(-1.0, 1.0, by = 0.1))#
		print(p)#
		}#
	return(M)#
	}
data(SrE.IR)
require("lattice")#
data(metMUD2)#
sampleDistSpectra(SrE.IR, main = "Sample Correlations for metMUD2")
data(SrE.NMR)
data(metMUD2)
require("lattice")#
data(metMUD2)#
sampleDistSpectra(metMUD2, main = "Sample Correlations for metMUD2")
require("lattice")#
data(metMUD2)#
sampleDistSpectra(SrE.NMR, main = "Sample Correlations for metMUD2")
library('gplot')
library('gplots')
?heatmap2
?gplots
?heatmap
?package-gplots
?seX
?check4Gaps
x <- seq(from = 5, to = 12, by = 0.1)#
remove <- 40:45; x <- x[-remove]
check4Gaps(x)
data(SrE.IR)#
newIR <- removeFreq(SrE.IR, rem.freq = SrE.IR$freq > 1800 & SrE.IR$freq < 2500)#
check4Gaps(newIR$freq, newIR$data[1,], plot = TRUE)
library("devtools")
?document
library("ChemoSpec")
?splitSpectraGroups
