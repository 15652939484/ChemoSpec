browseVignettes("seriation")
library("ChemoSpec")
data(metMUD2)
hmapSpectra(metMUD2)
res <- hmapSpectra(metMUD2)
res <- hmapSpectra(metMUD2, col = "bluered")
res <- hmapSpectra(metMUD2, col = heat.colors(5))
data(SrE.IR)
res <- hmapSpectra(SrE.IR, col = heat.colors(5))
?hmap
str(res)
names(res)
hmapSpectra
IR <- removeFreq(SrE.IR, rem.freq = SrE.IR$freq > 1850 & SrE.IR$freq < 1650)
IR <- removeFreq(SrE.IR, rem.freq = SrE.IR$freq > 1850 | SrE.IR$freq < 1650)
sumSpectra(IR)
res <- hmapSpectra(IR, col = heat.colors(5))
M <- matrix(rnorm(100), ncol = 10)
M <- matrix(rnorm(100), ncol = 10)#
M[,1] <- c(0.1, 0.2, 0.25, 0.3, 0.4, 0.55, 0.6, 0.7, 0.9, 0.95)
M
collapseRowsOrCols <- function(M, ind, rows = TRUE, thres, verbose = FALSE) {#
	M <- as.matrix(M)#
	if (rows) {#
#
		rD <- diff(M[,ind])#
		if (verbose) {#
			message("Collapsing rows")#
			names(rD) <- paste(2:nrow(M), 1:(nrow(M)-1), sep = "-")#
			cat("rowDiff is: \n")#
			print(rD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(rD)) {#
#
			if (rD[i] <= thres) {#
				gather <- c(gather, i)	#
				}#
#
			if (rD[i] > thres) { #
				gather <- gather[-1] #
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(rD)) { #
				gather <- gather[-1] #
				if (length(gather) <= 1) { #
					next #
					}			#
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[-trash,]#
	} #
	return(M)#
	}
collapseRowsOrCols <- function(M, ind, rows = TRUE, thres, verbose = FALSE) {#
	M <- as.matrix(M)#
	if (rows) {#
#
		rD <- diff(M[,ind])#
		if (verbose) {#
			message("Collapsing rows")#
			names(rD) <- paste(2:nrow(M), 1:(nrow(M)-1), sep = "-")#
			cat("rowDiff is: \n")#
			print(rD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(rD)) {#
#
			if (rD[i] <= thres) {#
				gather <- c(gather, i)	#
				}#
#
			if (rD[i] > thres) { #
				gather <- gather[-1] #
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(rD)) { #
				gather <- gather[-1] #
				if (length(gather) <= 1) { #
					next #
					}			#
				gather <- c(gather, gather[length(gather)] + 1) #
#
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[-trash,]#
	} #
	return(M)#
	}
collapseRowsOrCols <- function(M, ind, rows = TRUE, thres, verbose = FALSE) {#
	M <- as.matrix(M)#
	if (rows) {#
#
		rD <- diff(M[,ind])#
		if (verbose) {#
			message("Collapsing rows")#
			names(rD) <- paste(2:nrow(M), 1:(nrow(M)-1), sep = "-")#
			cat("rowDiff is: \n")#
			print(rD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(rD)) {#
#
			if (rD[i] <= thres) {#
				gather <- c(gather, i)	#
				}#
#
			if (rD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(rD)) { #
				gather <- gather[-1]#
				print(gather)#
				if (length(gather) <= 1) { #
					next #
					}			#
				gather <- c(gather, gather[length(gather)] + 1) #
#
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[-trash,]#
	} #
	return(M)#
	}
collapseRowsOrCols <- function(M, ind, rows = TRUE, thres, verbose = FALSE) {#
	M <- as.matrix(M)#
	if (rows) {#
#
		rD <- diff(M[,ind])#
		if (verbose) {#
			message("Collapsing rows")#
			names(rD) <- paste(2:nrow(M), 1:(nrow(M)-1), sep = "-")#
			cat("rowDiff is: \n")#
			print(rD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(rD)) {#
#
			if (rD[i] <= thres) {#
				gather <- c(gather, i)	#
				}#
#
			if (rD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(rD)) { #
				gather <- gather[-1]#
				print(gather)#
				gather <- c(gather, gather[length(gather)] + 1) #
#
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[-trash,]#
	} #
	return(M)#
	}
tst
collapseRowsOrCols <- function(M, ind, rows = TRUE, thres, verbose = FALSE) {#
	M <- as.matrix(M)#
	if (rows) {#
#
		rD <- diff(M[,ind])#
		if (verbose) {#
			message("Collapsing rows")#
			names(rD) <- paste(2:nrow(M), 1:(nrow(M)-1), sep = "-")#
			cat("rowDiff is: \n")#
			print(rD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(rD)) {#
#
			if (rD[i] <= thres) {#
				gather <- c(gather, i)	#
				}#
#
			if (rD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(rD)) { #
				if (rD[i] <= thres) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
					M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[-trash,]#
	} #
	return(M)#
	}
tst <- collapseRowsOrCols(M, 1, thres = 0.05, verbose = TRUE)
dim(tst)
collapseRowsOrCols <- function(M, ind, rows = TRUE, thres, verbose = FALSE) {#
	M <- as.matrix(M)#
	if (rows) {#
#
		rD <- diff(M[,ind])#
		if (verbose) {#
			message("Collapsing rows")#
			names(rD) <- paste(2:nrow(M), 1:(nrow(M)-1), sep = "-")#
			cat("rowDiff is: \n")#
			print(rD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(rD)) {#
#
			if (rD[i] <= thres) {#
				gather <- c(gather, i)	#
				}#
#
			if (rD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(rD)) { #
				if (rD[i] <= thres) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
					M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[-trash,]#
	} #
	if (!rows) {#
#
		cD <- diff(M[ind,])#
		if (verbose) {#
			message("Collapsing columns")#
			names(cD) <- paste(2:ncol(M), 1:(ncol(M)-1), sep = "-")#
			cat("colDiff is: \n")#
			print(cD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(cD)) {#
#
			if (cD[i] <= thres) {#
				gather <- c(gather, i)	#
				}#
#
			if (cD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
				M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(cD)) { #
				if (cD[i] <= thres) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
					M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[,-trash]#
	} #
	return(M)#
	}
M <- matrix(1:100, ncol = 10)#
M[,1] <- c(0.1, 0.2, 0.25, 0.3, 0.4, 0.55, 0.6, 0.7, 0.9, 0.95)#
M[1,] <- c(5.3, 5.35, 5.9, 6.3, 6.31, 6.32, 8.0, 8.05, 8.87, 8.90)
tst2 <- collapseRowsOrCols(M, 1, rows = FALSE, thres = 0.05, verbose = TRUE)
all.equal
collapseRowsOrCols <- function(M, ind, rows = TRUE, thres, verbose = FALSE) {#
	chk <- function(x, y) all.equal(x, y) | x < y#
	M <- as.matrix(M)#
	if (rows) {#
#
		rD <- diff(M[,ind])#
		if (verbose) {#
			message("Collapsing rows")#
			names(rD) <- paste(2:nrow(M), 1:(nrow(M)-1), sep = "-")#
			cat("rowDiff is: \n")#
			print(rD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(rD)) {#
#
			if (chk(rD[i],thres)) {#
				gather <- c(gather, i)	#
				}#
#
			if (rD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(rD)) { #
				if (chk(rD[i],thres)) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
					M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[-trash,]#
	} #
	if (!rows) {#
#
		cD <- diff(M[ind,])#
		if (verbose) {#
			message("Collapsing columns")#
			names(cD) <- paste(2:ncol(M), 1:(ncol(M)-1), sep = "-")#
			cat("colDiff is: \n")#
			print(cD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(cD)) {#
#
			if (chk(cD[i], thres)) {#
				gather <- c(gather, i)	#
				}#
#
			if (cD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
				M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(cD)) { #
				if (chk(cD[i], thres)) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
					M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[,-trash]#
	} #
	return(M)#
	}
collapseRowsOrCols <- function(M, ind, rows = TRUE, thres, verbose = FALSE) {#
	chk <- function(x, y) (all.equal(x, y) | x < y)#
	M <- as.matrix(M)#
	if (rows) {#
#
		rD <- diff(M[,ind])#
		if (verbose) {#
			message("Collapsing rows")#
			names(rD) <- paste(2:nrow(M), 1:(nrow(M)-1), sep = "-")#
			cat("rowDiff is: \n")#
			print(rD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(rD)) {#
#
			if (chk(rD[i],thres)) {#
				gather <- c(gather, i)	#
				}#
#
			if (rD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(rD)) { #
				if (chk(rD[i],thres)) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
					M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[-trash,]#
	} #
	if (!rows) {#
#
		cD <- diff(M[ind,])#
		if (verbose) {#
			message("Collapsing columns")#
			names(cD) <- paste(2:ncol(M), 1:(ncol(M)-1), sep = "-")#
			cat("colDiff is: \n")#
			print(cD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(cD)) {#
#
			if (chk(cD[i], thres)) {#
				gather <- c(gather, i)	#
				}#
#
			if (cD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
				M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(cD)) { #
				if (chk(cD[i], thres)) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
					M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[,-trash]#
	} #
	return(M)#
	}
chk <- function(x, y) (all.equal(x, y) | x < y)
chk <- function(x, y) (isTrue(all.equal(x, y)) | x < y)
?all.equal
chk <- function(x, y) (isTRUE(all.equal(x, y)) | x < y)
chk(1.01e-5, 1.02e-5)
chk(1.01e-5, 1.02e-4)
chk(1.01e-5, 1.02e3)
chk(1.01e3, 1.02e-4)
collapseRowsOrCols <- function(M, ind, rows = TRUE, thres, verbose = FALSE) {#
	chk <- function(x, y) (isTRUE(all.equal(x, y)) | x < y)#
	M <- as.matrix(M)#
	if (rows) {#
#
		rD <- diff(M[,ind])#
		if (verbose) {#
			message("Collapsing rows")#
			names(rD) <- paste(2:nrow(M), 1:(nrow(M)-1), sep = "-")#
			cat("rowDiff is: \n")#
			print(rD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(rD)) {#
#
			if (chk(rD[i],thres)) {#
				gather <- c(gather, i)	#
				}#
#
			if (rD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(rD)) { #
				if (chk(rD[i],thres)) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
					M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[-trash,]#
	} #
	if (!rows) {#
#
		cD <- diff(M[ind,])#
		if (verbose) {#
			message("Collapsing columns")#
			names(cD) <- paste(2:ncol(M), 1:(ncol(M)-1), sep = "-")#
			cat("colDiff is: \n")#
			print(cD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(cD)) {#
#
			if (chk(cD[i], thres)) {#
				gather <- c(gather, i)	#
				}#
#
			if (cD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
				M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(cD)) { #
				if (chk(cD[i], thres)) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
					M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[,-trash]#
	} #
	return(M)#
	}
tst2 <- collapseRowsOrCols(M, 1, rows = FALSE, thres = 0.06, verbose = TRUE)
collapseRowsOrCols <- function(M, ind, rows = TRUE, thres, verbose = FALSE) {#
	require(plyr)#
	chk <- function(x, y) (isTRUE(all.equal(x, y)) | x < y)#
	M <- as.matrix(M)#
	if (rows) {#
		M <- arrange(M, M[,ind])#
		rD <- diff(M[,ind])#
		if (verbose) {#
			message("Collapsing rows")#
			names(rD) <- paste(2:nrow(M), 1:(nrow(M)-1), sep = "-")#
			cat("rowDiff is: \n")#
			print(rD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(rD)) {#
#
			if (chk(rD[i],thres)) {#
				gather <- c(gather, i)	#
				}#
#
			if (rD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(rD)) { #
				if (chk(rD[i],thres)) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
					M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[-trash,]#
	} #
	if (!rows) {#
#
		cD <- diff(M[ind,])#
		if (verbose) {#
			message("Collapsing columns")#
			names(cD) <- paste(2:ncol(M), 1:(ncol(M)-1), sep = "-")#
			cat("colDiff is: \n")#
			print(cD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(cD)) {#
#
			if (chk(cD[i], thres)) {#
				gather <- c(gather, i)	#
				}#
#
			if (cD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
				M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(cD)) { #
				if (chk(cD[i], thres)) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
					M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[,-trash]#
	} #
	return(M)#
	}
?sort
collapseRowsOrCols <- function(M, ind, rows = TRUE, thres, verbose = FALSE) {#
	chk <- function(x, y) (isTRUE(all.equal(x, y)) | x < y)#
	M <- as.matrix(M)#
	if (rows) {#
		M <- M[, order[M,ind]]#
		rD <- diff(M[,ind])#
		if (verbose) {#
			message("Collapsing rows")#
			names(rD) <- paste(2:nrow(M), 1:(nrow(M)-1), sep = "-")#
			cat("rowDiff is: \n")#
			print(rD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(rD)) {#
#
			if (chk(rD[i],thres)) {#
				gather <- c(gather, i)	#
				}#
#
			if (rD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(rD)) { #
				if (chk(rD[i],thres)) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
					M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[-trash,]#
	} #
	if (!rows) {#
#
		cD <- diff(M[ind,])#
		if (verbose) {#
			message("Collapsing columns")#
			names(cD) <- paste(2:ncol(M), 1:(ncol(M)-1), sep = "-")#
			cat("colDiff is: \n")#
			print(cD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(cD)) {#
#
			if (chk(cD[i], thres)) {#
				gather <- c(gather, i)	#
				}#
#
			if (cD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
				M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(cD)) { #
				if (chk(cD[i], thres)) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
					M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[,-trash]#
	} #
	return(M)#
	}
collapseRowsOrCols <- function(M, ind, rows = TRUE, thres, verbose = FALSE) {#
	chk <- function(x, y) (isTRUE(all.equal(x, y)) | x < y)#
	M <- as.matrix(M)#
	if (rows) {#
		M <- M[, order([M,ind])]#
		rD <- diff(M[,ind])#
		if (verbose) {#
			message("Collapsing rows")#
			names(rD) <- paste(2:nrow(M), 1:(nrow(M)-1), sep = "-")#
			cat("rowDiff is: \n")#
			print(rD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(rD)) {#
#
			if (chk(rD[i],thres)) {#
				gather <- c(gather, i)	#
				}#
#
			if (rD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(rD)) { #
				if (chk(rD[i],thres)) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
					M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[-trash,]#
	} #
	if (!rows) {#
#
		cD <- diff(M[ind,])#
		if (verbose) {#
			message("Collapsing columns")#
			names(cD) <- paste(2:ncol(M), 1:(ncol(M)-1), sep = "-")#
			cat("colDiff is: \n")#
			print(cD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(cD)) {#
#
			if (chk(cD[i], thres)) {#
				gather <- c(gather, i)	#
				}#
#
			if (cD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
				M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(cD)) { #
				if (chk(cD[i], thres)) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
					M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[,-trash]#
	} #
	return(M)#
	}
collapseRowsOrCols <- function(M, ind, rows = TRUE, thres, verbose = FALSE) {#
	chk <- function(x, y) (isTRUE(all.equal(x, y)) | x < y)#
	M <- as.matrix(M)#
	if (rows) {#
		M <- M[, order(M[,ind])]#
		rD <- diff(M[,ind])#
		if (verbose) {#
			message("Collapsing rows")#
			names(rD) <- paste(2:nrow(M), 1:(nrow(M)-1), sep = "-")#
			cat("rowDiff is: \n")#
			print(rD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(rD)) {#
#
			if (chk(rD[i],thres)) {#
				gather <- c(gather, i)	#
				}#
#
			if (rD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
				M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(rD)) { #
				if (chk(rD[i],thres)) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following rows will be collapsed: ", gather, "\n")#
					M[gather[1],] <- colMeans(M[gather,], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[-trash,]#
	} #
	if (!rows) {#
#
		cD <- diff(M[ind,])#
		if (verbose) {#
			message("Collapsing columns")#
			names(cD) <- paste(2:ncol(M), 1:(ncol(M)-1), sep = "-")#
			cat("colDiff is: \n")#
			print(cD)#
			}#
		gather <- NA_integer_ #
		trash <- NA_integer_ #
		for (i in 1:length(cD)) {#
#
			if (chk(cD[i], thres)) {#
				gather <- c(gather, i)	#
				}#
#
			if (cD[i] > thres) { #
				gather <- gather[-1]#
				if (length(gather) == 0) { #
					gather <- NA_integer_ #
					next #
					}		#
				gather <- c(gather, gather[length(gather)] + 1) #
				if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
				M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
				trash <- c(trash, gather[-1]) #
				gather <- NA_integer_ #
				} #
#
			if (i == length(cD)) { #
				if (chk(cD[i], thres)) { #
					gather <- gather[-1]#
					gather <- c(gather, gather[length(gather)] + 1) #
					if (verbose) cat("The following columns will be collapsed: ", gather, "\n")#
					M[,gather[1]] <- rowMeans(M[,gather], na.rm = TRUE)#
					trash <- c(trash, gather[-1]) #
					}#
				} #
			}#
		trash <- trash[-1]	#
		if (verbose) cat("Collapsed ", length(trash), " rows\n")#
		if (length(trash) > 0) M <- M[,-trash]#
	} #
	return(M)#
	}
tst1 <- collapseRowsOrCols(M, 1, rows = TRUE, thres = 0.05, verbose = TRUE)
